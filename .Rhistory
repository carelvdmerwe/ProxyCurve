Z_CADdf <- as.data.frame(Z_CAD)
Z_CADdf[1,1]
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",as.is=TRUE)
Z_CADdf <- as.data.frame(Z_CAD)
Z_CADdf[1,1]
Z_CADdf[,1]<- as.Date(Z_CADdf[,1], format = "%y/%m/%d")
Z_CADdf[1,1]
as.Date("2002/11/19", format = "%y/%m/%d")
as.Date("2002/11/19", format = "%d/%m/%y")
as.Date("19/11/2002", format = "%d/%m/%y")
as.Date("11/19/2002", format = "%d/%m/%y")
as.Date("2002/19/11", format = "%d/%m/%y")
as.Date("2002/11/19", format = "%d/%m/%y")
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",as.is=TRUE)
Z_CADdf <- as.data.frame(Z_CAD)
Z_CADdf[1,1]
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv")
Z_CADdf <- as.data.frame(Z_CAD)
Z_CADdf[1,1]
Z_CADdf
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv")
Z_CAD[,1]
as.Date(Z_CAD[,1],origin = "1900-01-01")
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv")
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",rownames=TRUE)
?read.csv
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",rownames=1)
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",row.names=1)
Z_CAD
rownames(Z_CAD)[1]
as.Date(rownames(Z_CAD)[1])
Z_CAD <<- read.csv("data/Testing/CAD/Clean Zeroes.csv",row.names=1)
rownames(Z_CAD)[1]
as.Date(rownames(Z_CAD)[1])
?dateInput
?updateDateInput
fix(updateDateInput)
fix(updateDateInputNEW)
fix(updateDateInput)
args(dateInput)
updateDateInputNEW <- function (session, inputId, label = NULL, value = NULL, min = NULL,
max = NULL, datesdisabled = NULL)
{
formatDate <- function(x) {
if (is.null(x))
return(NULL)
format(as.Date(x), "%Y-%m-%d")
}
value <- formatDate(value)
min <- formatDate(min)
max <- formatDate(max)
datesdisabled <- formatDate(datesdisabled)
message <- dropNulls(list(label = label, value = value,
min = min, max = max,datesdisabled=datesdisabled))
session$sendInputMessage(inputId, message)
}.
updateDateInputNEW <- function (session, inputId, label = NULL, value = NULL, min = NULL,
max = NULL, datesdisabled = NULL)
{
formatDate <- function(x) {
if (is.null(x))
return(NULL)
format(as.Date(x), "%Y-%m-%d")
}
value <- formatDate(value)
min <- formatDate(min)
max <- formatDate(max)
datesdisabled <- formatDate(datesdisabled)
message <- dropNulls(list(label = label, value = value,
min = min, max = max,datesdisabled=datesdisabled))
session$sendInputMessage(inputId, message)
}
startenddates <- c(rownames(Z_CAD)[1],rownames(Z_CAD)[length(rownames(Z_CAD))])
startenddates
seq(as.Date(startenddates[1]), as.Date("startenddates[2]"), by="days")
as.Date(startenddates[1])
as.Date("startenddates[2]")
startenddates[2]
seq(as.Date(startenddates[1]), as.Date(startenddates[2]), by="days")
a <- seq(as.Date(startenddates[1]), as.Date(startenddates[2]), by="days")
a
rownames(Z_CAD)
rownames(Z_CAD) %in% a
a %in% rownames(Z_CAD)
a[1] %in% rownames(Z_CAD)[1]
a[1]
rownames(Z_CAD)[1]
as.Date(a[1]) %in% as.Date(rownames(Z_CAD)[1])
as.Date(rownames(Z_CAD)) %in% as.Date(a)
as.Date(a) %*% as.Date(rownames(Z_CAD))
as.Date(a) %*% as.Date(rownames(Z_CAD)
)
as.Date(a) %*% as.Date(rownames(Z_CAD))
match(as.Date(rownames(Z_CAD)), as.Date(a))
match(as.Date(a),as.Date(rownames(Z_CAD)))
!is.na(match(as.Date(a),as.Date(rownames(Z_CAD))))
is.na(match(as.Date(a),as.Date(rownames(Z_CAD))))
a[is.na(match(as.Date(a),as.Date(rownames(Z_CAD))))]
runApp()
runApp()
runApp()
dropNulls
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Z_CAD
Z_CAD
cbind(Z_CAD[,1],Z_CAD)
runApp()
rownames(datesupdate)
rownames(plotdata)
rownames(Z_CAD)
match("2006-09-21",rownames(Z_CAD))
Z_CAD[match("2006-09-21",rownames(Z_CAD))]
Z_CAD[match("2006-09-21",rownames(Z_CAD)),]
Term <- c(0,0.003,0.005,0.019,0.038,0.083,0.167,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)
Term == 1
Term <= 1
Z_CAD[match("2006-09-21",rownames(Z_CAD)),]
a <- Z_CAD[match("2006-09-21",rownames(Z_CAD)),]
a
a[Term <=3]
a
a[!is.na(a)]
runApp()
runApp()
curvefull
colnames
runApp()
runApp()
curvefull
v
curvefullwithNA
curvefullwithNA
plotdata[match(input$Date,as.Date(rownames(plotdata))),]
curvesparse
runApp()
datesupdate
curvefullwithNA
plotdata
plotdata[match(input$Date,as.Date(rownames(plotdata))),]
runApp()
curvefull
runApp()
runApp()
curvefull
curvesparse
runApp()
curvefull
curvesparse
E_ZAR
EMat
runApp()
runApp()
EMat
c(1,2,3,4,5,6,7) %*% EMat
ecoin
runApp()
ecoin
ecoin %*% EMat
as.numeric(ecoin) %*% EMat
runApp()
ecoin
EcoVEC
curvesparse
runApp()
curvefull
curvesparse
runApp()
curvesparse
curvefullTerm <= rv$sparse
Term <= rv$sparse
runApp()
curvefull
curvesparse
Term <= rv$sparse
Term <= 4
runApp()
curvesparse
?seq
runApp()
CovTerms
dim(curvesparse)[1]
curvesparse[dim(curvesparse)[1],2]
runApp()
CovTerms
Zin
approx(curvesparse[,1],curvesparse[,2],CovTerms)
runApp()
Zin
runApp()
ZVEC
runApp()
F1Yin
runApp()
F1MVEC
F1MTau1
F1MTau2
runApp()
F1MVEC
runApp()
FavgTauS
FavgTauM
runApp()
runApp()
FavgTauS
FavgTauM
FavgTauL
runApp()
FavgTauS
.FavgTauM
FavgTauM
FavgTauL
runApp()
FavgTauS
FavgTauM
FavgTauL
Term>min(6,5)
Term>min(6,5) & Term<=5
runApp()
Term>min(6,5)FavgTauL
FavgTauL
FavgTauM
runApp()
FavgTauL
FavgTauS
FavgTauM
Term<=min(6,2)
runApp()
FavgTauL
FavgTauM
FavgTauS
runApp()
FAvgVEC
Favgin
Favg1MTauS
Favg6MTauS
Favg1YTauS
Favg1MTauM
Favg6MTauM
Favg1YTauM
Favg1MTauL
Favg6MTauL
.Favg1YTauL
runApp()
Favgin
FAvgVEC
curvesparse
curvesparse[dim(curvesparse)[1],2]
Terms
Term
Term[Term>=0.5 & Term <= 6]
curvesparse
curvesparse[,1][curvesparse[,1]>=0.5]
curvefull
runApp()
runApp()
SparseFunct(Trmsinraw = curvesparse[,1][curvesparse[,1]>=1.5],
Rtsraw = curvesparse[,2][curvesparse[,1]>=1.5],
addterms = 30,
addrates = 0.08,
Trmsout = curvefull[,1],
RtsCorr = curvefull[,2],
TrmsCorr = curvefull[,1]
)
SparseFunct <-
function (Trmsinraw,
Rtsraw,
addterms,
addrates,
Trmsout,
RtsCorr,
TrmsCorr)
{
require(xts)
require(YieldCurve)
Nelson.SiegelA <- function (rate, maturity)
{
rate <- try.xts(rate, error = as.matrix)
if (ncol(rate) == 1) rate <- matrix(as.vector(rate), 1, nrow(rate))
pillars.number <- length(maturity)
lambdaValues <- seq(1/12, maturity[pillars.number], by = 0.25)
FinalResults <- matrix(0, nrow(rate), 4)
colnames(FinalResults) <- c("beta_0", "beta_1", "beta_2", "lambda")
j <- 1
while (j <= nrow(rate))
{
InterResults <- matrix(0, length(lambdaValues), 5)
colnames(InterResults) <- c("beta0", "beta1", "beta2", "lambda", "SSR")
for (i in 1:length(lambdaValues))
{
lambdaTemp <- optimize(.factorBeta2, interval = c(0.001, 12),
maturity = lambdaValues[i], maximum = TRUE)$maximum
temprates <- as.numeric(rate[j,])[!is.na(rate[j,])]
tempdates <- maturity[!is.na(rate[j,])]
InterEstimation <- .NS.estimator(temprates, tempdates, lambdaTemp)
BetaCoef <- InterEstimation$Par
SSR <- sum(InterEstimation$Res^2)
InterResults[i, ] <- c(BetaCoef, lambdaTemp, SSR)
if (lambdaValues[i]>max(tempdates)) InterResults[i, ]<- c(BetaCoef,
lambdaValues[i], 1e+05)
}
BestRow <- which.min(InterResults[, 5])
FinalResults[j, ] <- InterResults[BestRow, 1:4]
j <- j + 1
}
reclass(FinalResults, rate)
}
NSrates <- function (Coeff, maturity)
{
if(nrow(Coeff==1))Curve <- matrix(0, 1, length(maturity))
else Curve <- xts(matrix(0, nrow(Coeff), length(maturity)), order.by = time(Coeff))
colnames(Curve) <- make.names(maturity)
Coeff <- as.matrix(Coeff)
for (i in 1:nrow(Curve)) {
Curve[i, ] <- as.numeric(Coeff[i, 1]) * rep(1, length(maturity)) +
as.numeric(Coeff[i, 2]) * as.numeric(.factorBeta1(Coeff[i,
4], maturity)) + as.numeric(Coeff[i, 3]) * as.numeric(.factorBeta2(Coeff[i,
4], maturity))
}
return(Curve)
}
Trmsin <- c(Trmsinraw,addterms)
Rts <- merge(Rtsraw,addrates)
NSParameters <- Nelson.SiegelA( rate= Rts, maturity=Trmsin )
y <- NSrates(NSParameters, Trmsout)
yind <- Trmsout>max(Trmsinraw) & !is.na(RtsCorr)
yhat <- t(y)[yind]
ytrue <- t(RtsCorr)[yind]
RMSE <- sqrt(sum((yhat-ytrue)^2)/length(yhat))*100
return(cbind(NSParameters,RMSE));
}
SparseFunct(Trmsinraw = curvesparse[,1][curvesparse[,1]>=1.5],
Rtsraw = curvesparse[,2][curvesparse[,1]>=1.5],
addterms = 30,
addrates = 0.08,
Trmsout = curvefull[,1],
RtsCorr = curvefull[,2],
TrmsCorr = curvefull[,1]
)
curvesparse[,1][curvesparse[,1]>=1.5]
curvesparse[,2][curvesparse[,1]>=1.5]
a<- merge(curvesparse[,2][curvesparse[,1]>=1.5],0.08)
a
a<- merge(t(curvesparse[,2][curvesparse[,1]>=1.5]),0.08)
a
runApp()
SparseFunct(Trmsinraw = t(curvesparse[,1][curvesparse[,1]>=1),
Rtsraw = t(curvesparse[,2][curvesparse[,1]>=1),
addterms = 30,
addrates = 0.08,
Trmsout = t(curvefull[,1]),
RtsCorr = t(curvefull[,2]),
TrmsCorr = t(curvefull[,1])
)
SparseFunct(Trmsinraw = t(curvesparse[,1][curvesparse[,1]>=1]),
Rtsraw = t(curvesparse[,2][curvesparse[,1]>=1]),
addterms = 30,
addrates = 0.08,
Trmsout = t(curvefull[,1]),
RtsCorr = t(curvefull[,2]),
TrmsCorr = t(curvefull[,1])
)
seq(from = curvesparse[1,1], to = curvesparse[dim(curvesparse)[1],1],length.out = 11)
seq(from = curvesparse[1,1], to = curvesparse[dim(curvesparse)[1],1]-1,length.out = 11)
seq(from = curvesparse[1,1]+1, to = curvesparse[dim(curvesparse)[1],1],length.out = 11)
seq(from = curvesparse[1,1], to = curvesparse[dim(curvesparse)[1],1]-1/12,length.out = 11)
seq(from = curvesparse[1,1]+1/12, to = curvesparse[dim(curvesparse)[1],1],length.out = 11)
seq(as.Date(startenddates[1]), as.Date(startenddates[2]), by="days")
runApp()
addpoint
runApp()
a1
a2
a3
a4
runApp()
a0
load("O:/PhD/4. Programs/1. Artikel 1/3. Simulation Setups/20180130(Corrected)/Input.RData")
ls()
SvenssonA
Svenfit
SvenssonA <-    function (rate, maturity)
{
rate <- try.xts(rate, error = as.matrix)
if (ncol(rate) == 1) rate <- matrix(as.vector(rate), 1, nrow(rate))
pillars.number <- length(maturity)
Tau1Values <<- seq(maturity[1], median(maturity), by = 1)
Tau2Values <<- seq(median(maturity), maturity[pillars.number], by = 1.5)
FinalResults <- matrix(0, nrow(rate), 6)
FinalResultsTau2 <- matrix(0, length(Tau1Values), 7)
colnames(FinalResults) <- c("beta_0", "beta_1", "beta_2", "beta_3", "tau1", "tau2")
j <- 1
while (j <= nrow(rate))
{
temprates<- as.numeric(rate[j,])[!is.na(rate[j,])]
tempdates<- maturity[!is.na(rate[j,])]
InterResultsTau1 <- matrix(0, length(Tau1Values), 7)
InterResultsTau2 <- matrix(0, length(Tau2Values), 7)
for (i in 1:length(Tau1Values))
{
Tau1Temp <- optimize(.beta2Spot, interval = c(0.001, max(Tau1Values)),
maturity = Tau1Values[i], maximum = TRUE)$maximum
for (a in 1:length(Tau2Values))
{
Tau2Temp <- optimize(.beta2Spot, interval = c(0.001,
maturity[pillars.number]), maturity = Tau2Values[a],
maximum = TRUE)$maximum
InterEstimation <- .NSS.estimator(temprates, tempdates, Tau1Temp, Tau2Temp)
BetaCoef <- InterEstimation$Par
SSR <- sum(InterEstimation$Res^2)
InterResultsTau2[a, ] <- c(BetaCoef, Tau1Temp,Tau2Temp, SSR)
if (Tau2Values[a]>max(tempdates))
{
InterResults[i, ]<- c(BetaCoef, Tau1Temp, Tau2Temp, 1e+05)
}
if (Tau1Values[i]>max(tempdates))
{
InterResults[i, ]<- c(BetaCoef,Tau1Temp, Tau2Temp, 1e+05)
}
}
BestRowTau2 <- which.min(InterResultsTau2[, 7])
FinalResultsTau2[i, ] <- InterResultsTau2[BestRowTau2,]
}
BestRow <- which.min(FinalResultsTau2[, 7])
FinalResults[j, ] <- FinalResultsTau2[BestRow, 1:6]
j <- j + 1
}
reclass(FinalResults, rate)
}
a1
a2
SvenssonA(a1,a2)
Svenfit
Srates
runApp()
ApproxCurve
Term
Sparsefitout
plot(Term,ApproxCurve)
llines(Term,curvesparse)
lines(Term,curvesparse)
lines(curvesparse)
lines(curvetrue
)
lines(curvefull)
plot(c(0,max(curvetrue[,1]),c(0,max(curvetrue[,2])))
)
plot(c(0,max(curvefull[,1]),c(0,max(curvefull[,2]))))
c(0,max(curvefull[,1])
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])))
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])),pty=0)
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])),lwd=0)
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])),col=white)
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])),col="white")
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])),col="white",xlab="Term in years",ylab = "Rate")
lines(curvefull,lwd=1)
runApp()
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])+0.02),col="white",xlab="Term in years",ylab = "Rate")
lines(curvefull,lwd=1)
lines(curvesparse,lwd=2)
lines(curvesparse,lwd=3)
lines(curvesparse[Terms>1.5],lwd=3)
plot(c(0,max(curvefull[,1])),c(0,max(curvefull[,2])+0.02),col="white",xlab="Term in years",ylab = "Rate")
lines(curvefull,lwd=1)
lines(curvesparse[Terms>1.5],lwd=3)
lines(curvesparse[Terms>1.5],lwd=3)
lines(curvesparse[curvesparse[,1]>1.5],lwd=3)
curvesparse[,1]>1.5]
curvesparse[,1]>1.5
lines(curvesparse[curvesparse[,1]>1.5,],lwd=3)
lines(curvefull[curvefull[,1]>9,1],ApproxCurve[Terms == curvefull[curvefull[,1]>9,1]],col="red")
curvefull[curvefull[,1]>9,1]
curvefull[curvefull[,1]>=9,1]
ApproxCurve
Terms == curvefull[curvefull[,1]>9,1]
curvefull[curvefull[, 1] > 9, 1]
Terms
match(Terms, curvefull[curvefull[,1]>9,1])
match(curvefull[curvefull[,1]>9,1],Terms, )
match(curvefull[curvefull[,1]>9,1],Terms )
lines(curvefull[curvefull[,1]>=9,1],ApproxCurve[match(curvefull[curvefull[,1]>9,1],Terms )],col="red")
lines(curvefull[curvefull[,1]>=9,1],ApproxCurve[match(curvefull[curvefull[,1]>9,1],Terms )],col="red")
lines(curvefull[curvefull[,1]>=9,1],ApproxCurve[match(curvefull[curvefull[,1]>=9,1],Terms )],col="red")
runApp()
EcoVEC
ecoin
runApp()
runApp()
points(c(50, 0.08))
points(c(20, 0.08))
points(x = 20, y=  0.08)
runApp()
points(x = 20, y=  0.08)
points(x = 20, y=  0.09)
?points
runApp()
runApp()
runApp()
